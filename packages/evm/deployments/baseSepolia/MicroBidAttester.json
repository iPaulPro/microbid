{
  "address": "0x2D6293cbeD5F6403aE2E769C6971D880DFDC5000",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract IEAS",
          "name": "_eas",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_schemaUid",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        }
      ],
      "name": "AttestationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "VerifierUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCHEMA",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierHash",
              "type": "uint256"
            }
          ],
          "internalType": "struct Types.PoPSchema",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "createAttestation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getAttestation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaUid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "setVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ee91a698e085e9294124f91e716db32c6b7624adedc343abe51e57e25e6d050",
  "receipt": {
    "to": null,
    "from": "0xA82C8f5A03AeB2221abEdB51d9E462aFd9f63CD4",
    "contractAddress": "0x2D6293cbeD5F6403aE2E769C6971D880DFDC5000",
    "transactionIndex": 4,
    "gasUsed": "739893",
    "logsBloom": "0x
    "blockHash": "0xf932db6602cf26a8fc11b95e3f1b5258d54a628bc2bf1b0977723148d5f100d2",
    "transactionHash": "0x7ee91a698e085e9294124f91e716db32c6b7624adedc343abe51e57e25e6d050",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 13807102,
        "transactionHash": "0x7ee91a698e085e9294124f91e716db32c6b7624adedc343abe51e57e25e6d050",
        "address": "0x2D6293cbeD5F6403aE2E769C6971D880DFDC5000",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0xf932db6602cf26a8fc11b95e3f1b5258d54a628bc2bf1b0977723148d5f100d2"
      }
    ],
    "blockNumber": 13807102,
    "cumulativeGasUsed": "3024275",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA82C8f5A03AeB2221abEdB51d9E462aFd9f63CD4",
    "0x4200000000000000000000000000000000000021",
    "0x9C2008274683d060F2e4BAdC7f590B3ddaE945Ef",
    "0xa18203fef1db32761379aec06eb2396e47e9da77c02ad944815de1fa85fd094d"
  ],
  "numDeployments": 4,
  "solcInputHash": "60e197f8850af8262f55ef912d73205e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IEAS\",\"name\":\"_eas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_schemaUid\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"AttestationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCHEMA\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.PoPSchema\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"createAttestation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaUid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"VerifierUpdated(address)\":{\"details\":\"Emitted when the verifier for the contract is set or updated.\",\"params\":{\"verifier\":\"The address of the verifier.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_eas\":\"The Ethereum Attestation Service instance\",\"_verifier\":\"The PoP verifier address\",\"owner\":\"The owner of the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MicroBidAttester.sol\":\"MicroBidAttester\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID of the new attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MicroBidAttester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IEAS, Attestation, AttestationRequest, AttestationRequestData} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport {NO_EXPIRATION_TIME, EMPTY_UID} from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\n\\nimport {IAttester} from \\\"./interfaces/IAttester.sol\\\";\\nimport {Types} from \\\"./constants/Types.sol\\\";\\n\\ncontract MicroBidAttester is IAttester, Ownable {\\n    event MessageReceived(\\n        uint16 srcChainId,\\n        bytes srcAddress,\\n        uint64 nonce,\\n        bytes payload\\n    );\\n\\n    event AttestationCreated(\\n        bytes32 uid,\\n        bytes32 schema,\\n        bytes data,\\n        address attester\\n    );\\n\\n    /// @dev Emitted when the verifier for the contract is set or updated.\\n    /// @param verifier The address of the verifier.\\n    event VerifierUpdated(address indexed verifier);\\n\\n    string public constant SCHEMA = \\\"uint256 nullifierHash\\\";\\n\\n    bool internal constant REVOCABLE = true; // TODO Make false when deploying to mainnet.\\n\\n    bytes32 public immutable schemaUid;\\n\\n    IEAS internal immutable eas;\\n\\n    address internal verifier;\\n\\n    mapping(address => bytes32) internal attestations;\\n\\n    /**\\n     * @param owner The owner of the contract\\n\\t * @param _eas The Ethereum Attestation Service instance\\n\\t * @param _verifier The PoP verifier address\\n\\t */\\n    constructor(\\n        address owner,\\n        IEAS _eas,\\n        address _verifier,\\n        bytes32 _schemaUid\\n    ) Ownable(owner) {\\n        eas = _eas;\\n        verifier = _verifier;\\n        schemaUid = _schemaUid;\\n    }\\n\\n    function setVerifier(address _verifier) public onlyOwner {\\n        verifier = _verifier;\\n        emit VerifierUpdated(verifier);\\n    }\\n\\n    function isVerified(address _address) public view returns (bool) {\\n        bytes32 uid = attestations[_address];\\n        if (uid == 0) {\\n            return false;\\n        }\\n\\n        // Ensure the attestation is from this contract\\n        Attestation memory attestation = eas.getAttestation(uid);\\n        return\\n            attestation.attester == address(this) &&\\n            attestation.recipient == _address;\\n    }\\n\\n    function getAttestation(\\n        address _address\\n    ) public view returns (Attestation memory) {\\n        bytes32 uid = attestations[_address];\\n        return eas.getAttestation(uid);\\n    }\\n\\n    function createAttestation(\\n        address recipient,\\n        Types.PoPSchema memory data\\n    ) public returns (bytes32) {\\n        require(msg.sender == verifier, \\\"Unauthorized verifier\\\");\\n\\n        bytes memory encodedData = abi.encode(data);\\n\\n        AttestationRequest memory request = AttestationRequest({\\n            schema: schemaUid,\\n            data: AttestationRequestData({\\n            data: encodedData,\\n            recipient: recipient,\\n            expirationTime: NO_EXPIRATION_TIME,\\n            revocable: REVOCABLE,\\n            refUID: EMPTY_UID,\\n            value: 0\\n        })\\n        });\\n\\n        bytes32 uid = eas.attest(request);\\n        attestations[recipient] = uid;\\n        emit AttestationCreated(uid, schemaUid, encodedData, recipient);\\n\\n        return uid;\\n    }\\n}\\n\",\"keccak256\":\"0x26e32a60cbf7cf382a214773239477db590f3718e22045e9d7a1ead159aa18c8\",\"license\":\"MIT\"},\"contracts/constants/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Types {\\n    /**\\n     * @notice A struct containing information about an auction item\\n\\t * @param itemId The ID of the auction item\\n\\t * @param isStarted Whether the auction was started\\n\\t * @param endBlock The block at which the auction ends\\n\\t * @param totalBids The total number of bids on the auction\\n\\t * @param latestBidder The address of the latest bidder\\n\\t * @param metadataURI The URI of the metadata for the item\\n\\t * @param claimed Whether the item has been claimed\\n\\t */\\n    struct AuctionItem {\\n        uint256 itemId;\\n        bool isStarted;\\n        uint256 endBlock;\\n        uint256 totalBids;\\n        address latestBidder;\\n        string metadataURI;\\n        bool claimed;\\n    }\\n\\n    /**\\n     * @notice A struct containing information about a Proof of Personhood schema\\n\\t * @param nullifierHash The hash of the nullifier\\n\\t */\\n    struct PoPSchema {\\n        uint256 nullifierHash;\\n    }\\n}\\n\",\"keccak256\":\"0xee4f345cd728b4fdb509111e379f0ef406aaaeaa059628583cb892a997d4d495\",\"license\":\"MIT\"},\"contracts/interfaces/IAttester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Types} from \\\"../constants/Types.sol\\\";\\n\\ninterface IAttester {\\n    function isVerified(address _address) external view returns (bool);\\n\\n    function createAttestation(\\n        address recipient,\\n        Types.PoPSchema memory data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xddbc936f13ac2d54ccf4a1b203dcfd11605c8552dc80a8ba49a66bf6b20ae24a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610d10380380610d1083398101604081905261002f91610100565b836001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610098565b506001600160a01b0392831660a052600180546001600160a01b031916929093169190911790915560805250610153565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100fd57600080fd5b50565b6000806000806080858703121561011657600080fd5b8451610121816100e8565b6020860151909450610132816100e8565b6040860151909350610143816100e8565b6060959095015193969295505050565b60805160a051610b7d610193600039600081816102a40152818161044901526105b901526000818160e00152818161023101526103670152610b7d6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610102578063b4a8b1b81461011d578063b9209e331461015e578063f2fde38b14610181578063f9b717971461019457600080fd5b806331752e3a146100985780635437988d146100be578063715018a6146100d35780637f726118146100db575b600080fd5b6100ab6100a6366004610703565b6101b4565b6040519081526020015b60405180910390f35b6100d16100cc36600461076d565b6103a1565b005b6100d16103f3565b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b0390911681526020016100b5565b610151604051806040016040528060158152602001740ead2dce8646a6c40dcead8d8d2ccd2cae490c2e6d605b1b81525081565b6040516100b591906107da565b61017161016c36600461076d565b610407565b60405190151581526020016100b5565b6100d161018f36600461076d565b6104fc565b6101a76101a236600461076d565b61053a565b6040516100b591906107ed565b6001546000906001600160a01b0316331461020e5760405162461bcd60e51b81526020600482015260156024820152742ab730baba3437b934bd32b2103b32b934b334b2b960591b60448201526064015b60405180910390fd5b60408051835160208201526000910160408051601f1981840301815282820182527f00000000000000000000000000000000000000000000000000000000000000008352815160c0810183526001600160a01b03808916825260006020838101829052600184870152606084018290526080840185905260a08401829052860192909252925163f17325e760e01b8152919450917f0000000000000000000000000000000000000000000000000000000000000000169063f17325e7906102d99085906004016108bc565b6020604051808303816000875af11580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c919061093f565b6001600160a01b03871660009081526002602052604090819020829055519091507f3ccd60ad7253c7d6299c6d98bdc749fb8e40e2439c60b4fc21ac4712893a8890906103909083907f00000000000000000000000000000000000000000000000000000000000000009087908b90610958565b60405180910390a195945050505050565b6103a9610631565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee32790600090a250565b6103fb610631565b610405600061065e565b565b6001600160a01b0381166000908152600260205260408120548082036104305750600092915050565b6040516328c44a9960e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a3112a6490602401600060405180830381865afa158015610498573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c09190810190610a50565b60e08101519091506001600160a01b0316301480156104f45750836001600160a01b03168160c001516001600160a01b0316145b949350505050565b610504610631565b6001600160a01b03811661052e57604051631e4fbdf760e01b815260006004820152602401610205565b6105378161065e565b50565b60408051610140810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905260e0840183905261010084018390526101208401526001600160a01b0385811683526002909152908390205492516328c44a9960e21b8152600481018490529192917f00000000000000000000000000000000000000000000000000000000000000009091169063a3112a6490602401600060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261062a9190810190610a50565b9392505050565b6000546001600160a01b031633146104055760405163118cdaa760e01b8152336004820152602401610205565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461053757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156106fd576106fd6106c3565b60405290565b600080828403604081121561071757600080fd5b8335610722816106ae565b92506020601f198201121561073657600080fd5b506040516020810181811067ffffffffffffffff8211171561075a5761075a6106c3565b6040526020939093013583525092909150565b60006020828403121561077f57600080fd5b813561062a816106ae565b60005b838110156107a557818101518382015260200161078d565b50506000910152565b600081518084526107c681602086016020860161078a565b601f01601f19169290920160200192915050565b60208152600061062a60208301846107ae565b6020815281516020820152602082015160408201526000604083015161081f606084018267ffffffffffffffff169052565b50606083015167ffffffffffffffff8116608084015250608083015167ffffffffffffffff811660a08401525060a083015160c083015260c083015161087060e08401826001600160a01b03169052565b5060e083015161010061088d818501836001600160a01b03169052565b84015190506101206108a28482018315159052565b8401516101408481015290506104f46101608401826107ae565b60208152815160208201526000602083015160408084015260018060a01b03815116606084015267ffffffffffffffff60208201511660808401526040810151151560a0840152606081015160c0840152608081015160c060e08501526109276101208501826107ae565b905060a0820151610100850152809250505092915050565b60006020828403121561095157600080fd5b5051919050565b84815283602082015260806040820152600061097760808301856107ae565b905060018060a01b038316606083015295945050505050565b805167ffffffffffffffff811681146109a857600080fd5b919050565b80516109a8816106ae565b805180151581146109a857600080fd5b600082601f8301126109d957600080fd5b815167ffffffffffffffff808211156109f4576109f46106c3565b604051601f8301601f19908116603f01168101908282118183101715610a1c57610a1c6106c3565b81604052838152866020858801011115610a3557600080fd5b610a4684602083016020890161078a565b9695505050505050565b600060208284031215610a6257600080fd5b815167ffffffffffffffff80821115610a7a57600080fd5b908301906101408286031215610a8f57600080fd5b610a976106d9565b8251815260208301516020820152610ab160408401610990565b6040820152610ac260608401610990565b6060820152610ad360808401610990565b608082015260a083015160a0820152610aee60c084016109ad565b60c0820152610aff60e084016109ad565b60e0820152610100610b128185016109b8565b908201526101208381015183811115610b2a57600080fd5b610b36888287016109c8565b91830191909152509594505050505056fea26469706673582212200d26576d56387bbaf3d4d392df1a83c6ec4b0d9c01597e312b333a93876139b164736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610102578063b4a8b1b81461011d578063b9209e331461015e578063f2fde38b14610181578063f9b717971461019457600080fd5b806331752e3a146100985780635437988d146100be578063715018a6146100d35780637f726118146100db575b600080fd5b6100ab6100a6366004610703565b6101b4565b6040519081526020015b60405180910390f35b6100d16100cc36600461076d565b6103a1565b005b6100d16103f3565b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b0390911681526020016100b5565b610151604051806040016040528060158152602001740ead2dce8646a6c40dcead8d8d2ccd2cae490c2e6d605b1b81525081565b6040516100b591906107da565b61017161016c36600461076d565b610407565b60405190151581526020016100b5565b6100d161018f36600461076d565b6104fc565b6101a76101a236600461076d565b61053a565b6040516100b591906107ed565b6001546000906001600160a01b0316331461020e5760405162461bcd60e51b81526020600482015260156024820152742ab730baba3437b934bd32b2103b32b934b334b2b960591b60448201526064015b60405180910390fd5b60408051835160208201526000910160408051601f1981840301815282820182527f00000000000000000000000000000000000000000000000000000000000000008352815160c0810183526001600160a01b03808916825260006020838101829052600184870152606084018290526080840185905260a08401829052860192909252925163f17325e760e01b8152919450917f0000000000000000000000000000000000000000000000000000000000000000169063f17325e7906102d99085906004016108bc565b6020604051808303816000875af11580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c919061093f565b6001600160a01b03871660009081526002602052604090819020829055519091507f3ccd60ad7253c7d6299c6d98bdc749fb8e40e2439c60b4fc21ac4712893a8890906103909083907f00000000000000000000000000000000000000000000000000000000000000009087908b90610958565b60405180910390a195945050505050565b6103a9610631565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee32790600090a250565b6103fb610631565b610405600061065e565b565b6001600160a01b0381166000908152600260205260408120548082036104305750600092915050565b6040516328c44a9960e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a3112a6490602401600060405180830381865afa158015610498573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c09190810190610a50565b60e08101519091506001600160a01b0316301480156104f45750836001600160a01b03168160c001516001600160a01b0316145b949350505050565b610504610631565b6001600160a01b03811661052e57604051631e4fbdf760e01b815260006004820152602401610205565b6105378161065e565b50565b60408051610140810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905260e0840183905261010084018390526101208401526001600160a01b0385811683526002909152908390205492516328c44a9960e21b8152600481018490529192917f00000000000000000000000000000000000000000000000000000000000000009091169063a3112a6490602401600060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261062a9190810190610a50565b9392505050565b6000546001600160a01b031633146104055760405163118cdaa760e01b8152336004820152602401610205565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461053757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156106fd576106fd6106c3565b60405290565b600080828403604081121561071757600080fd5b8335610722816106ae565b92506020601f198201121561073657600080fd5b506040516020810181811067ffffffffffffffff8211171561075a5761075a6106c3565b6040526020939093013583525092909150565b60006020828403121561077f57600080fd5b813561062a816106ae565b60005b838110156107a557818101518382015260200161078d565b50506000910152565b600081518084526107c681602086016020860161078a565b601f01601f19169290920160200192915050565b60208152600061062a60208301846107ae565b6020815281516020820152602082015160408201526000604083015161081f606084018267ffffffffffffffff169052565b50606083015167ffffffffffffffff8116608084015250608083015167ffffffffffffffff811660a08401525060a083015160c083015260c083015161087060e08401826001600160a01b03169052565b5060e083015161010061088d818501836001600160a01b03169052565b84015190506101206108a28482018315159052565b8401516101408481015290506104f46101608401826107ae565b60208152815160208201526000602083015160408084015260018060a01b03815116606084015267ffffffffffffffff60208201511660808401526040810151151560a0840152606081015160c0840152608081015160c060e08501526109276101208501826107ae565b905060a0820151610100850152809250505092915050565b60006020828403121561095157600080fd5b5051919050565b84815283602082015260806040820152600061097760808301856107ae565b905060018060a01b038316606083015295945050505050565b805167ffffffffffffffff811681146109a857600080fd5b919050565b80516109a8816106ae565b805180151581146109a857600080fd5b600082601f8301126109d957600080fd5b815167ffffffffffffffff808211156109f4576109f46106c3565b604051601f8301601f19908116603f01168101908282118183101715610a1c57610a1c6106c3565b81604052838152866020858801011115610a3557600080fd5b610a4684602083016020890161078a565b9695505050505050565b600060208284031215610a6257600080fd5b815167ffffffffffffffff80821115610a7a57600080fd5b908301906101408286031215610a8f57600080fd5b610a976106d9565b8251815260208301516020820152610ab160408401610990565b6040820152610ac260608401610990565b6060820152610ad360808401610990565b608082015260a083015160a0820152610aee60c084016109ad565b60c0820152610aff60e084016109ad565b60e0820152610100610b128185016109b8565b908201526101208381015183811115610b2a57600080fd5b610b36888287016109c8565b91830191909152509594505050505056fea26469706673582212200d26576d56387bbaf3d4d392df1a83c6ec4b0d9c01597e312b333a93876139b164736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "VerifierUpdated(address)": {
        "details": "Emitted when the verifier for the contract is set or updated.",
        "params": {
          "verifier": "The address of the verifier."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_eas": "The Ethereum Attestation Service instance",
          "_verifier": "The PoP verifier address",
          "owner": "The owner of the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 883,
        "contract": "contracts/MicroBidAttester.sol:MicroBidAttester",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5187,
        "contract": "contracts/MicroBidAttester.sol:MicroBidAttester",
        "label": "verifier",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5191,
        "contract": "contracts/MicroBidAttester.sol:MicroBidAttester",
        "label": "attestations",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}